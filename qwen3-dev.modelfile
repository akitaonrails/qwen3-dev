# Qwen3 14B Development Modelfile
# Optimized for software development, code generation, and technical assistance
# Based on Qwen3 best practices and enhanced for development workflows
# 
# Usage: ollama create qwen3-dev -f qwen3-dev.modelfile
# IMPORTANT: Ensure 'qwen3:14b' is available locally or adjust the FROM directive

FROM qwen3:14b

# ============================================================================
# TEMPLATE CONFIGURATION
# ============================================================================
# Preserve Qwen3's native chat template with proper role handling
# This template supports system messages, tools, and multi-turn conversations
TEMPLATE """{{- if .Messages }}
{{- if or .System .Tools }}<|im_start|>system
{{- if .System }}
{{ .System }}
{{- end }}
{{- if .Tools }}
# Tools
You may call one or more functions to assist with the user query.
You are provided with function signatures within <tools></tools> XML tags:
<tools>
{{- range .Tools }}
{"type": "function", "function": {{ .Function }}}
{{- end }}
</tools>
For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call>
{{- end }}<|im_end|>
{{ end }}
{{- range $i, $_ := .Messages }}
{{- $last := eq (len (slice $.Messages $i)) 1 -}}
{{- if eq .Role "user" }}<|im_start|>user
{{ .Content }}<|im_end|>
{{ else if eq .Role "assistant" }}<|im_start|>assistant
{{ if .Content }}{{ .Content }}
{{- else if .ToolCalls }}<tool_call>
{{ range .ToolCalls }}{"name": "{{ .Function.Name }}", "arguments": {{ .Function.Arguments }}}
{{ end }}</tool_call>
{{- end }}{{ if not $last }}<|im_end|>
{{ end }}
{{- else if eq .Role "tool" }}<|im_start|>user
<tool_response>
{{ .Content }}
</tool_response><|im_end|>
{{ end }}
{{- if and (ne .Role "assistant") $last }}<|im_start|>assistant
{{ end }}
{{- end }}
{{- else }}
{{- if .System }}<|im_start|>system
{{ .System }}<|im_end|>
{{ end }}{{ if .Prompt }}<|im_start|>user
{{ .Prompt }}<|im_end|>
{{ end }}<|im_start|>assistant
{{ end }}{{ .Response }}{{ if .Response }}<|im_end|>{{ end }}"""

# ============================================================================
# STOP TOKENS
# ============================================================================
# Critical stop tokens for proper conversation flow
PARAMETER stop <|im_start|>
PARAMETER stop <|im_end|>
PARAMETER stop <|endoftext|>

# ============================================================================
# SAMPLING PARAMETERS
# ============================================================================
# Optimized for code generation and technical accuracy
# Low temperature for consistent, focused responses
PARAMETER temperature 0.1
# Moderate top_k for balanced creativity
PARAMETER top_k 20
# Slightly lower top_p for more focused outputs
PARAMETER top_p 0.9
# Small min_p to avoid very low probability tokens
PARAMETER min_p 0.02
# Gentle repetition penalty to avoid redundancy
PARAMETER repeat_penalty 1.05

# ============================================================================
# OUTPUT CONFIGURATION
# ============================================================================
# High token limit for complex code explanations and multi-file responses
# Maximum output tokens (adjust as needed)
PARAMETER num_predict 32768
# Context window size
PARAMETER num_ctx 32768
# Batch size for efficient processing
PARAMETER num_batch 512

# ============================================================================
# SYSTEM PROMPT
# ============================================================================
SYSTEM """You are an expert software engineer and technical mentor specializing in:
- Code generation, debugging, and optimization
- System architecture and design patterns
- Algorithm implementation and analysis
- Multi-language development (Python, JavaScript, Java, C++, Go, Rust, etc.)
- Framework expertise (React, Django, Spring, etc.)
- DevOps and deployment strategies
- Database design and optimization
- API design and integration

## Core Principles:
1. **Accuracy First**: Provide correct, working code that follows best practices
2. **Minimal Changes**: Make only necessary modifications to existing code
3. **Preserve Functionality**: Never break existing functionality
4. **Clear Documentation**: Include comments and explanations for complex logic
5. **Security Awareness**: Consider security implications in all recommendations
6. **Performance Conscious**: Suggest optimizations when relevant

## Response Format:
- Use proper markdown formatting with ```language code blocks
- Provide step-by-step explanations for complex solutions
- Include error handling and edge cases
- Suggest testing strategies when appropriate
- Explain trade-offs and alternative approaches

## Code Quality Standards:
- Follow language-specific conventions and style guides
- Use meaningful variable and function names
- Implement proper error handling
- Consider scalability and maintainability
- Include relevant type hints/annotations where applicable

## Debugging Approach:
1. Analyze the problem systematically
2. Identify root causes, not just symptoms
3. Provide targeted fixes with explanations
4. Suggest preventive measures
5. Recommend testing strategies

When modifying existing code, preserve the original structure and naming conventions unless they directly contribute to the issue. Always ensure the code remains in a working state after your modifications."""
